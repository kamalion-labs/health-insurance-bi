generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id    Int    @id @default(autoincrement())
  email String @unique
  senha String
  nome  String

  ativo        Boolean   @default(true)
  criadoEm     DateTime? @default(now()) @db.Date
  atualizadoEm DateTime? @updatedAt @db.Date
  admin        Boolean   @default(false)
}
model Evento {
    id             Int             @id @default(autoincrement())
    descricao      String
    dataRealizacao DateTime        @db.Date
    dataPagamento  DateTime?       @db.Date
    quantidade     Int
    custoTotal     Float           @db.DoublePrecision
    sinistro       Float           @db.DoublePrecision
    coparticipacao Float           @db.DoublePrecision
    teveInternacao Boolean?
    prontoSocorro  Boolean?
    UTI            Boolean?
    situacao       Situacao?
    risco          Risco?
    tipoInternacao TipoInternacao?
    tipoParto      TipoParto?
    reembolso      Boolean?

    prestador   Prestador @relation(fields: [idPrestador], references: [id])
    idPrestador Int

    CID   Cid @relation(fields: [idCid], references: [id])
    idCid Int

    pessoa   Pessoa @relation(fields: [idPessoa], references: [id])
    idPessoa Int

    procedimento   Procedimento @relation(fields: [idProcedimento], references: [id])
    idProcedimento Int
}

model Prestador {
    id         Int         @id @default(autoincrement())
    nome       String
    UF         String?
    hospital   Boolean
    eventos    Evento[]
    liberacoes Liberacao[]
}

model Cid {
    id                 Int      @id @default(autoincrement())
    codigo             String   @unique
    descricao          String?
    descricaoAbreviada String?
    eventos            Evento[]
}

model Especialidade {
    id            Int            @id @default(autoincrement())
    nome          String
    procedimentos Procedimento[]
}

model Procedimento {
    id      Int      @id @default(autoincrement())
    nome    String
    tuss    String
    eventos Evento[]

    especialidade   Especialidade @relation(fields: [idEspecialidade], references: [id])
    idEspecialidade Int

    categoria   Categoria @relation(fields: [idCategoria], references: [id])
    idCategoria Int
}

model Categoria {
    id                Int                @id @default(autoincrement())
    nome              String
    procedimentos     Procedimento[]
    subcategorias     SubCategoria[]
}

model SubCategoria {
    id   Int    @id @default(autoincrement())
    nome String

    categoria   Categoria @relation(fields: [idCategoria], references: [id])
    idCategoria Int
}

model Liberacao {
    id                   Int               @id @default(autoincrement())
    certificado          Int
    dependencia          Int?
    contrato             Int?
    subfatura            Int?
    senha                String?
    diasSolicitacaoSenha Int?
    diasLiberacaoSenha   Int?
    situacaoSenha        SituacaoSenha?
    possuiLiminar        Boolean?
    regimeInternacao     RegimeInternacao?
    dataSolicitacao      DateTime?         @db.Date
    dataInternacao       DateTime?         @db.Date

    plano   Plano @relation(fields: [idPlano], references: [id])
    idPlano Int

    prestador   Prestador @relation(fields: [idPrestador], references: [id])
    idPrestador Int
}

enum Situacao {
    PENDENTE
    LIBERADA
    NEGADA
    CANCELADA
}

enum Risco {
    BAIXO
    MEDIO
    ALTO
}

enum TipoInternacao {
    CLINICA
    CIRURGICA
    OBSTETRICA
    PSIQUIATRICA
    PEDIATRICA
}

enum TipoParto {
    CESAREO
    VAGINAL
}

enum SituacaoSenha {
    LIBERADA
    NEGADA
}

enum RegimeInternacao {
    HOSPITALAR
    HOSPITAL_DIA
}
model Operadora {
  id               Int                @id @default(autoincrement())
  nome             String
  arquivos         ArquivoOperadora[]
  empresaOperadora EmpresaOperadora[]
  planos           Plano[]
}

model ArquivoOperadora {
  id        Int                  @id @default(autoincrement())
  nome      String
  tipo      TipoArquivoOperadora @default(txt)
  separador String
  tabela    String

  operadora   Operadora @relation(fields: [idOperadora], references: [id])
  idOperadora Int

  colunas ColunaArquivo[]
}

model ColunaArquivo {
  id      Int        @id @default(autoincrement())
  nome    String
  coluna  String
  tipo    TipoColuna
  posicao Int?
  inicio  Int?
  fim     Int?

  referenciaTabela String?
  referenciaColuna String?

  arquivoOperadora   ArquivoOperadora @relation(fields: [idArquivoOperadora], references: [id])
  idArquivoOperadora Int
}

model Empresa {
  id               Int                @id @default(autoincrement())
  nome             String
  CNPJ             String             @unique
  numeroContrato   String?
  inicioContrato   DateTime?          @db.Date
  fimContrato      DateTime?          @db.Date
  indiceReajuste   Int?
  limitadorTecnico Int?
  coparticipacoes  Coparticipacao[]
  empresaOperadora EmpresaOperadora[]
  pessoas          Pessoa[]
}

model Coparticipacao {
  id   Int     @id @default(autoincrement())
  nome String
  CNPJ String? @unique

  empresa   Empresa @relation(fields: [idEmpresa], references: [id])
  idEmpresa Int
}

model EmpresaOperadora {
  empresa     Empresa   @relation(fields: [idEmpresa], references: [id])
  idEmpresa   Int
  operadora   Operadora @relation(fields: [idOperadora], references: [id])
  idOperadora Int

  @@id([idEmpresa, idOperadora])
}

model Plano {
  id         Int         @id @default(autoincrement())
  nome       String
  pessoas    Pessoa[]
  liberacoes Liberacao[]

  operadora   Operadora @relation(fields: [idOperadora], references: [id])
  idOperadora Int
}

enum TipoArquivoOperadora {
  txt
  csv
  xls
  xlsx
}

enum TipoColuna {
  string
  number
  date
  mesAno
  referencia
}
model Pessoa {
  id                Int        @id @default(autoincrement())
  nome              String
  CPF               String     @unique
  sexo              Sexo?
  dataNascimento    DateTime?  @db.Date
  dataAdmissao      DateTime?  @db.Date
  dataAdmissaoPlano DateTime?  @db.Date
  funcionario       Boolean?
  status            Status?
  scoreDiabetes     Float?     @db.DoublePrecision
  scoreHipertensao  Float?     @db.DoublePrecision
  atestados         Atestado[]
  eventos           Evento[]

  cargo   Cargo? @relation(fields: [idCargo], references: [id])
  idCargo Int?

  tipoTitularidade   TipoTitularidade @relation(fields: [idTipoTitularidade], references: [id])
  idTipoTitularidade Int

  empresa   Empresa @relation(fields: [idEmpresa], references: [id])
  idEmpresa Int

  plano   Plano @relation(fields: [idPlano], references: [id])
  idPlano Int

  titular   Pessoa?  @relation("Titular", fields: [idTitular], references: [id])
  idTitular Int?
  pessoas   Pessoa[] @relation("Titular")
}

model Cargo {
  id      Int      @id @default(autoincrement())
  nome    String   @unique
  pessoas Pessoa[]

  setor   Setor @relation(fields: [idSetor], references: [id])
  idSetor Int
}

model Setor {
  id     Int     @id @default(autoincrement())
  nome   String
  cargos Cargo[]
}

model TipoTitularidade {
  id             Int          @id @default(autoincrement())
  nome           Titularidade
  grauParentesco String?
  pessoas        Pessoa[]
}

model Atestado {
  id         Int      @id @default(autoincrement())
  dataInicio DateTime @db.Date
  dataFim    DateTime @db.Date
  duracao    Int

  pessoa   Pessoa @relation(fields: [idPessoa], references: [id])
  idPessoa Int
}

enum Sexo {
  M
  F
}

enum Status {
  ATIVO
  INATIVO
  EXCLUIDO
}

enum Titularidade {
  TITULAR
  DEPENDENTE
}
